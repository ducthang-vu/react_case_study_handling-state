{"version":3,"sources":["main/Container.js","components/Header.js","components/Counter.js","components/ButtonsMenu.js","main/Standard.js","context/MyContext.js","main/WithContext.js","store/reducer.js","store/store.js","main/WithRedux.js","store/action.js","App.js","serviceWorker.js","index.js"],"names":["StyledDiv","styled","div","Container","props","children","StyledHeader","header","Header","Counter","StyledButton","button","ButtonsMenu","modifiers","map","modifier","index","onClick","key","value","Standard","useState","initial","counter","setCounter","Array","from","differences","x","className","MyContext","React","createContext","setCounters","MyContextProvider","Provider","WithContext","context","useContext","Fragment","reducer","state","action","type","payload","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","WithRedux","useSelector","dispatch","useDispatch","difference","App","style","fontFamily","display","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1d0ad5b.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledDiv = styled.div`\r\n    background-color: #FFCACC;\r\n    flex-basis: calc(100% / 3);\r\n    text-align: center;\r\n    }`\r\n\r\n\r\nconst Container = (props) => {\r\n    return (\r\n        <StyledDiv>{props.children}</StyledDiv>\r\n    )\r\n}\r\n\r\nexport default Container","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledHeader = styled.header`\r\n    padding: 15px;\r\n    text-align: center;\r\n    background-color: #F29EAA;\r\n    color: white;\r\n`\r\n\r\nconst Header = () => {\r\n    return (\r\n        <StyledHeader>\r\n            <h1>React Case study (handling state)</h1> \r\n        </StyledHeader>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledDiv = styled.div`\r\n    margin: 10px auto;\r\n    width: 50px;\r\n    height: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border: 2px solid black;\r\n    font-weight: bold;\r\n    background-color: #A7FFFF;\r\n    `\r\n\r\nconst Counter = (props) => {\r\n    return (\r\n        <StyledDiv>\r\n            <span>{props.children}</span>\r\n        </StyledDiv>\r\n    )\r\n}\r\n\r\nexport default Counter","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledButton = styled.button`\r\n    margin: 10px;\r\n    width: 50px;\r\n    height: 50px;\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #29C7C2;\r\n    color: white;\r\n    font-weight: bold;\r\n    border: 1px solid #29C7C2;\r\n    padding: 8px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: #25E2E8;\r\n        color: black;\r\n    }`\r\n\r\nconst ButtonsMenu = (props) => {\r\n    return (\r\n        props.modifiers.map((modifier, index) =>\r\n            <StyledButton \r\n                onClick={modifier.modifier}\r\n                key={index}\r\n            >\r\n                {modifier.value > 0 && '+'}{modifier.value}\r\n            </StyledButton>\r\n        )\r\n    )\r\n}\r\n\r\nexport default ButtonsMenu","import React, { useState } from 'react'\r\nimport Counter from '../components/Counter'\r\nimport ButtonsMenu from '../components/ButtonsMenu'\r\n\r\nconst Standard = (props) => {\r\n    const [counter, setCounter] = useState(props.initial)\r\n    const updateCounter = difference => setCounter(counter + difference)\r\n    const modifiers = Array.from(props.differences, x => {return {value: x, modifier: () => updateCounter(x)}})\r\n        \r\n    return (\r\n        <div className=\"standard-counter\">\r\n            <h2>With React Hooks</h2>\r\n            <Counter>{counter}</Counter>\r\n            <ButtonsMenu modifiers={modifiers}></ButtonsMenu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Standard","import React, { useState } from 'react'\r\n\r\nconst MyContext = React.createContext(\r\n    {\r\n        counter: 0,\r\n        setCounters: []\r\n    }\r\n)\r\n\r\nconst MyContextProvider = props => {\r\n    const [counter, setCounter] = useState(props.initial)\r\n    const updateCounter = difference => setCounter(counter + difference)\r\n    const modifiers = Array.from(props.differences, x => {return {value: x, modifier: () => updateCounter(x)}})\r\n\r\n    return (\r\n        <MyContext.Provider value={{counter, setCounters: modifiers}}>\r\n            {props.children}\r\n        </MyContext.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport { MyContext, MyContextProvider}","import React, { useContext } from 'react'\r\nimport { MyContext } from '../context/MyContext'\r\nimport Counter from '../components/Counter'\r\nimport ButtonsMenu from '../components/ButtonsMenu'\r\n\r\nconst WithContext = () => {\r\n    const context = useContext(MyContext)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>With React Context</h2>\r\n            <Counter>{context.counter}</Counter>\r\n            <ButtonsMenu modifiers={context.setCounters}></ButtonsMenu>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default WithContext","const reducer = (state, action) => {\r\n    if (action.type === 'update') {\r\n        const counter = state.counter\r\n        return {\r\n            ...state,\r\n            counter: counter + action.payload\r\n        }\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import { createStore,  applyMiddleware, compose  } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport reducer from './reducer'\r\n\r\n\r\nconst initialState = { counter: 250}\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(reducer, initialState, composeEnhancer(applyMiddleware(thunk)))\r\n\r\nexport default store","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Counter from '../components/Counter'\r\nimport ButtonsMenu from '../components/ButtonsMenu'\r\nimport { updateCounter } from '../store/action'\r\n\r\nconst WithRedux = (props) => {\r\n    const counter = useSelector(state => state.counter)\r\n    const dispatch = useDispatch()\r\n    const modifiers = Array.from(props.differences, x => {return {\r\n        value: x, \r\n        modifier: () => dispatch(updateCounter(x))\r\n    }})\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h2>With Redux</h2>\r\n            <Counter>{counter}</Counter>\r\n            <ButtonsMenu modifiers={modifiers}></ButtonsMenu>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default WithRedux","const updateCounter = (difference) => (dispatch) => {\r\n    dispatch({ type: 'update', payload: difference });\r\n}\r\n\r\nexport { updateCounter }","import React from 'react';\nimport Container from './main/Container'\nimport Header from './components/Header'\nimport Standard from './main/Standard'\nimport { MyContextProvider } from './context/MyContext'\nimport WithContext from './main/WithContext'\nimport { Provider } from 'react-redux'\nimport store from './store/store'\nimport WithRedux from './main/WithRedux'\n\nfunction App() {\n  const differences = [-5, -1, 1, 5]\n  const style = {fontFamily: 'Roboto, sans-serif'}\n\n  return (\n    <div className=\"App\" style={style}>\n      <Header></Header>\n      <main style={{display: 'flex'}}>\n        <Container>\n          <Standard differences={differences} initial={10}></Standard>\n        </Container>\n\n        <Container>\n          <MyContextProvider differences={differences} initial={50}>\n            <WithContext></WithContext>\n          </MyContextProvider>\n        </Container>\n\n        <Container>\n          <Provider store={store}>\n            <WithRedux differences={differences}></WithRedux>\n          </Provider>\n        </Container>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}